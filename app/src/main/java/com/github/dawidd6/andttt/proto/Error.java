// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enums.proto

package com.github.dawidd6.andttt.proto;

/**
 * Protobuf enum {@code proto.Error}
 */
public enum Error
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>NONE = 0;</code>
   */
  NONE(0),
  /**
   * <code>UNDEFINED = 1;</code>
   */
  UNDEFINED(1),
  /**
   * <code>CLIENT_NAME_TOO_LONG = 21;</code>
   */
  CLIENT_NAME_TOO_LONG(21),
  /**
   * <code>CLIENT_NAME_EMPTY = 2;</code>
   */
  CLIENT_NAME_EMPTY(2),
  /**
   * <code>CLIENT_NAME_TAKEN = 3;</code>
   */
  CLIENT_NAME_TAKEN(3),
  /**
   * <code>CLIENT_HAS_A_ROOM = 4;</code>
   */
  CLIENT_HAS_A_ROOM(4),
  /**
   * <code>CLIENT_HAS_NO_ROOM = 5;</code>
   */
  CLIENT_HAS_NO_ROOM(5),
  /**
   * <code>CLIENT_NOT_FOUND_IN_ROOM = 6;</code>
   */
  CLIENT_NOT_FOUND_IN_ROOM(6),
  /**
   * <code>CLIENT_NOT_FOUND = 7;</code>
   */
  CLIENT_NOT_FOUND(7),
  /**
   * <code>CLIENT_HAS_NO_TURN = 8;</code>
   */
  CLIENT_HAS_NO_TURN(8),
  /**
   * <code>CLIENT_HAS_NO_SYMBOL = 9;</code>
   */
  CLIENT_HAS_NO_SYMBOL(9),
  /**
   * <code>ROOM_NAME_TOO_LONG = 20;</code>
   */
  ROOM_NAME_TOO_LONG(20),
  /**
   * <code>ROOM_NAME_EMPTY = 10;</code>
   */
  ROOM_NAME_EMPTY(10),
  /**
   * <code>ROOM_NAME_TAKEN = 11;</code>
   */
  ROOM_NAME_TAKEN(11),
  /**
   * <code>ROOM_FULL = 12;</code>
   */
  ROOM_FULL(12),
  /**
   * <code>ROOM_NOT_FOUND = 13;</code>
   */
  ROOM_NOT_FOUND(13),
  /**
   * <code>ROOM_NOT_EMPTY = 14;</code>
   */
  ROOM_NOT_EMPTY(14),
  /**
   * <code>ROOM_PASSWORD_NOT_FOUND = 22;</code>
   */
  ROOM_PASSWORD_NOT_FOUND(22),
  /**
   * <code>ROOM_PASSWORD_MISMATCH = 23;</code>
   */
  ROOM_PASSWORD_MISMATCH(23),
  /**
   * <code>ROOM_PASSWORD_TOO_LONG = 24;</code>
   */
  ROOM_PASSWORD_TOO_LONG(24),
  /**
   * <code>ENEMY_NOT_FOUND_BUT_SHOULD_BE = 15;</code>
   */
  ENEMY_NOT_FOUND_BUT_SHOULD_BE(15),
  /**
   * <code>ENEMY_NOT_FOUND = 16;</code>
   */
  ENEMY_NOT_FOUND(16),
  /**
   * <code>POSITION_ALREADY_OCCUPIED = 17;</code>
   */
  POSITION_ALREADY_OCCUPIED(17),
  /**
   * <code>POSITION_OUT_OF_BOUND = 18;</code>
   */
  POSITION_OUT_OF_BOUND(18),
  /**
   * <code>THERE_IS_A_WINNER = 19;</code>
   */
  THERE_IS_A_WINNER(19),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>NONE = 0;</code>
   */
  public static final int NONE_VALUE = 0;
  /**
   * <code>UNDEFINED = 1;</code>
   */
  public static final int UNDEFINED_VALUE = 1;
  /**
   * <code>CLIENT_NAME_TOO_LONG = 21;</code>
   */
  public static final int CLIENT_NAME_TOO_LONG_VALUE = 21;
  /**
   * <code>CLIENT_NAME_EMPTY = 2;</code>
   */
  public static final int CLIENT_NAME_EMPTY_VALUE = 2;
  /**
   * <code>CLIENT_NAME_TAKEN = 3;</code>
   */
  public static final int CLIENT_NAME_TAKEN_VALUE = 3;
  /**
   * <code>CLIENT_HAS_A_ROOM = 4;</code>
   */
  public static final int CLIENT_HAS_A_ROOM_VALUE = 4;
  /**
   * <code>CLIENT_HAS_NO_ROOM = 5;</code>
   */
  public static final int CLIENT_HAS_NO_ROOM_VALUE = 5;
  /**
   * <code>CLIENT_NOT_FOUND_IN_ROOM = 6;</code>
   */
  public static final int CLIENT_NOT_FOUND_IN_ROOM_VALUE = 6;
  /**
   * <code>CLIENT_NOT_FOUND = 7;</code>
   */
  public static final int CLIENT_NOT_FOUND_VALUE = 7;
  /**
   * <code>CLIENT_HAS_NO_TURN = 8;</code>
   */
  public static final int CLIENT_HAS_NO_TURN_VALUE = 8;
  /**
   * <code>CLIENT_HAS_NO_SYMBOL = 9;</code>
   */
  public static final int CLIENT_HAS_NO_SYMBOL_VALUE = 9;
  /**
   * <code>ROOM_NAME_TOO_LONG = 20;</code>
   */
  public static final int ROOM_NAME_TOO_LONG_VALUE = 20;
  /**
   * <code>ROOM_NAME_EMPTY = 10;</code>
   */
  public static final int ROOM_NAME_EMPTY_VALUE = 10;
  /**
   * <code>ROOM_NAME_TAKEN = 11;</code>
   */
  public static final int ROOM_NAME_TAKEN_VALUE = 11;
  /**
   * <code>ROOM_FULL = 12;</code>
   */
  public static final int ROOM_FULL_VALUE = 12;
  /**
   * <code>ROOM_NOT_FOUND = 13;</code>
   */
  public static final int ROOM_NOT_FOUND_VALUE = 13;
  /**
   * <code>ROOM_NOT_EMPTY = 14;</code>
   */
  public static final int ROOM_NOT_EMPTY_VALUE = 14;
  /**
   * <code>ROOM_PASSWORD_NOT_FOUND = 22;</code>
   */
  public static final int ROOM_PASSWORD_NOT_FOUND_VALUE = 22;
  /**
   * <code>ROOM_PASSWORD_MISMATCH = 23;</code>
   */
  public static final int ROOM_PASSWORD_MISMATCH_VALUE = 23;
  /**
   * <code>ROOM_PASSWORD_TOO_LONG = 24;</code>
   */
  public static final int ROOM_PASSWORD_TOO_LONG_VALUE = 24;
  /**
   * <code>ENEMY_NOT_FOUND_BUT_SHOULD_BE = 15;</code>
   */
  public static final int ENEMY_NOT_FOUND_BUT_SHOULD_BE_VALUE = 15;
  /**
   * <code>ENEMY_NOT_FOUND = 16;</code>
   */
  public static final int ENEMY_NOT_FOUND_VALUE = 16;
  /**
   * <code>POSITION_ALREADY_OCCUPIED = 17;</code>
   */
  public static final int POSITION_ALREADY_OCCUPIED_VALUE = 17;
  /**
   * <code>POSITION_OUT_OF_BOUND = 18;</code>
   */
  public static final int POSITION_OUT_OF_BOUND_VALUE = 18;
  /**
   * <code>THERE_IS_A_WINNER = 19;</code>
   */
  public static final int THERE_IS_A_WINNER_VALUE = 19;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static Error valueOf(int value) {
    return forNumber(value);
  }

  public static Error forNumber(int value) {
    switch (value) {
      case 0: return NONE;
      case 1: return UNDEFINED;
      case 21: return CLIENT_NAME_TOO_LONG;
      case 2: return CLIENT_NAME_EMPTY;
      case 3: return CLIENT_NAME_TAKEN;
      case 4: return CLIENT_HAS_A_ROOM;
      case 5: return CLIENT_HAS_NO_ROOM;
      case 6: return CLIENT_NOT_FOUND_IN_ROOM;
      case 7: return CLIENT_NOT_FOUND;
      case 8: return CLIENT_HAS_NO_TURN;
      case 9: return CLIENT_HAS_NO_SYMBOL;
      case 20: return ROOM_NAME_TOO_LONG;
      case 10: return ROOM_NAME_EMPTY;
      case 11: return ROOM_NAME_TAKEN;
      case 12: return ROOM_FULL;
      case 13: return ROOM_NOT_FOUND;
      case 14: return ROOM_NOT_EMPTY;
      case 22: return ROOM_PASSWORD_NOT_FOUND;
      case 23: return ROOM_PASSWORD_MISMATCH;
      case 24: return ROOM_PASSWORD_TOO_LONG;
      case 15: return ENEMY_NOT_FOUND_BUT_SHOULD_BE;
      case 16: return ENEMY_NOT_FOUND;
      case 17: return POSITION_ALREADY_OCCUPIED;
      case 18: return POSITION_OUT_OF_BOUND;
      case 19: return THERE_IS_A_WINNER;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<Error>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      Error> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<Error>() {
          public Error findValueByNumber(int number) {
            return Error.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.github.dawidd6.andttt.proto.Enums.getDescriptor().getEnumTypes().get(0);
  }

  private static final Error[] VALUES = values();

  public static Error valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private Error(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:proto.Error)
}

